@misc{lima2019framework,
	title={A framework for verifying deadlock and nondeterminism in UML activity diagrams based on CSP}, 
	author={Lucas Lima and Amaury Tavares and Sidney C. Nogueira},
	year={2019},
	eprint={1910.13638},
	archivePrefix={arXiv},
	primaryClass={cs.SE}
}

@inproceedings{molnar2018gamma,
	author = {Vince Moln{\'{a}}r and
	Bence Graics and
	Andr{\'{a}}s V{\"{o}}r{\"{o}}s and
	Istv{\'{a}}n Majzik and
	D{\'{a}}niel Varr{\'{o}}},
	title = {The {G}amma statechart composition framework: design, verification and code generation for component-based reactive systems},
	booktitle = {Proceedings of the 40th International Conference on Software Engineering: Companion Proceeedings},
	pages = {113--116},
	year = {2018},
	publisher = {ACM},
	doi = {10.1145/3183440.3183489}
}

@article{HAREL1987231,
title = {Statecharts: a visual formalism for complex systems},
journal = {Science of Computer Programming},
volume = {8},
number = {3},
pages = {231-274},
year = {1987},
issn = {0167-6423},
doi = {https://doi.org/10.1016/0167-6423(87)90035-9},
url = {https://www.sciencedirect.com/science/article/pii/0167642387900359},
author = {David Harel},
abstract = {We present a broad extension of the conventional formalism of state machines and state diagrams, that is relevant to the specification and design of complex discrete-event systems, such as multi-computer real-time systems, communication protocols and digital control units. Our diagrams, which we call statecharts, extend conventional state-transition diagrams with essentially three elements, dealing, respectively, with the notions of hierarchy, concurrency and communication. These transform the language of state diagrams into a highly structured and economical description language. Statecharts are thus compact and expressive—small diagrams can express complex behavior—as well as compositional and modular. When coupled with the capabilities of computerized graphics, statecharts enable viewing the description at different levels of detail, and make even very large specifications manageable and comprehensible. In fact, we intend to demonstrate here that statecharts counter many of the objections raised against conventional state diagrams, and thus appear to render specification by diagrams an attractive and plausible approach. Statecharts can be used either as a stand-alone behavioral description or as part of a more general design methodology that deals also with the system's other aspects, such as functional decomposition and data-flow specification. We also discuss some practical experience that was gained over the last three years in applying the statechart formalism to the specification of a particularly complex system.}
}

@ARTICLE{24143,  author={Murata, T.},  journal={Proceedings of the IEEE},   title={Petri nets: Properties, analysis and applications},   year={1989},  volume={77},  number={4},  pages={541-580},  doi={10.1109/5.24143}}

@article{https://doi.org/10.1002/sys.21524,
author = {Huang, Edward and McGinnis, Leon F. and Mitchell, Steven W.},
title = {Verifying SysML activity diagrams using formal transformation to Petri nets},
journal = {Systems Engineering},
volume = {23},
number = {1},
pages = {118-135},
keywords = {model-based systems engineering, system behavior modeling, model transformation},
doi = {https://doi.org/10.1002/sys.21524},
url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/sys.21524},
eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/sys.21524},
abstract = {Abstract The development of contemporary systems is an extremely complex process. One approach to modeling system behavior uses activity diagrams from Unified Modeling Language (UML)/System Modeling Language (SysML), providing a standard object-oriented graphical notation and enhancing reusability. However, UML/SysML activity diagrams do not directly support the kind of analysis needed to verify the system behavior, such as might be available with a Petri net (PN) model. We show that a behavior model represented by a set of fUML-compliant modeling elements in UML/SysML activity diagrams can be transformed into an equivalent PN, so that the analysis capability of PN can be applied. We define a formal mathematical notation for a set of modeling elements in activity diagrams, show the mapping rules between PN and activity diagrams, and propose a formal transformation algorithm. Two example system behavior models represented by UML/SysML activity diagrams are used for illustration.},
year = {2020}
}

@article{fuml,
author = {OMG},
title = {Semantics of a Foundational Subset for Executable UML Models},
url = {https://www.omg.org/spec/FUML/1.4/},
year = {2018}
}
https://www.omg.org/spec/FUML/1.4/