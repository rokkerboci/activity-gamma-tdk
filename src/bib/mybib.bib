@misc{lima2019framework,
	title={A framework for verifying deadlock and nondeterminism in {UML} activity diagrams based on {CSP}}, 
	author={Lucas Lima and Amaury Tavares and Sidney C. Nogueira},
	year={2019},
	eprint={1910.13638},
	archivePrefix={arXiv},
	primaryClass={cs.SE}
}

@inproceedings{molnar2018gamma,
	author = {Vince Moln{\'{a}}r and
	Bence Graics and
	Andr{\'{a}}s V{\"{o}}r{\"{o}}s and
	Istv{\'{a}}n Majzik and
	D{\'{a}}niel Varr{\'{o}}},
	title = {The {G}amma statechart composition framework: design, verification and code generation for component-based reactive systems},
	booktitle = {Proceedings of the 40th International Conference on Software Engineering: Companion Proceeedings},
	pages = {113--116},
	year = {2018},
	publisher = {ACM},
	doi = {10.1145/3183440.3183489}
}

@article{HAREL1987231,
title = {Statecharts: a visual formalism for complex systems},
journal = {Science of Computer Programming},
volume = {8},
number = {3},
pages = {231-274},
year = {1987},
issn = {0167-6423},
doi = {https://doi.org/10.1016/0167-6423(87)90035-9},
author = {David Harel},
abstract = {We present a broad extension of the conventional formalism of state machines and state diagrams, that is relevant to the specification and design of complex discrete-event systems, such as multi-computer real-time systems, communication protocols and digital control units. Our diagrams, which we call statecharts, extend conventional state-transition diagrams with essentially three elements, dealing, respectively, with the notions of hierarchy, concurrency and communication. These transform the language of state diagrams into a highly structured and economical description language. Statecharts are thus compact and expressive—small diagrams can express complex behavior—as well as compositional and modular. When coupled with the capabilities of computerized graphics, statecharts enable viewing the description at different levels of detail, and make even very large specifications manageable and comprehensible. In fact, we intend to demonstrate here that statecharts counter many of the objections raised against conventional state diagrams, and thus appear to render specification by diagrams an attractive and plausible approach. Statecharts can be used either as a stand-alone behavioral description or as part of a more general design methodology that deals also with the system's other aspects, such as functional decomposition and data-flow specification. We also discuss some practical experience that was gained over the last three years in applying the statechart formalism to the specification of a particularly complex system.}
}

@InProceedings{10.1007/978-3-642-82453-1_17,
author={Harel, D.
and Pnueli, A.},
editor={Apt, Krzysztof R.},
title={On the Development of Reactive Systems},
booktitle={Logics and Models of Concurrent Systems},
year={1985},
publisher={Springer Berlin Heidelberg},
address={Berlin, Heidelberg},
pages={477--498},
abstract={Some observations are made concerning the process of developing complex systems. A broad class of systems, termed reactive, is singled out as being particularly problematic when it comes to finding satisfactory methods for behavioral description. In this paper we recommend the recently proposed statechart method for this purpose. Moreover, it is observed that most reactive systems cannot be developed in a linear stepwise fashion, but, rather, give rise to a two-dimensional development process, featuring behavioral aspects in the one dimension and implementational ones in the other. Concurrency may occur in both dimensions, as orthogonality of states in the one and as parallelism of subsystems in the other. A preliminary approach to working one's way through this ``magic square'' of system development is then presented. The ideas described herein seem to be relevant to a wide variety of application areas.},
isbn={978-3-642-82453-1}
}

@ARTICLE{24143,  author={Murata, T.},  journal={Proceedings of the IEEE},   title={Petri nets: Properties, analysis and applications},   year={1989},  volume={77},  number={4},  pages={541-580},  doi={10.1109/5.24143}}

@Article{en12010019,
AUTHOR = {Ahmed, Asad and Hasan, Osman and Awwad, Falah and Bastaki, Nabil and Hasan, Syed Rafay},
TITLE = {Formal Asymptotic Analysis of Online Scheduling Algorithms for Plug-In Electric Vehicles’ Charging},
JOURNAL = {Energies},
VOLUME = {12},
YEAR = {2019},
NUMBER = {1},
ARTICLE-NUMBER = {19},
ISSN = {1996-1073},
DOI = {10.3390/en12010019}
}

@article{https://doi.org/10.1002/sys.21524,
author = {Huang, Edward and McGinnis, Leon F. and Mitchell, Steven W.},
title = {Verifying SysML activity diagrams using formal transformation to Petri nets},
journal = {Systems Engineering},
volume = {23},
number = {1},
pages = {118-135},
keywords = {model-based systems engineering, system behavior modeling, model transformation},
doi = {https://doi.org/10.1002/sys.21524},
eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/sys.21524},
year = {2020}
}


@article{DoD_modeling_and_simulation,
author = {{DoD}},
title = {{DoD} Modeling and Simulation {(M\&S)} Glossary},
journal = {{DoD} Manual 5000.59-M. Arlington, {VA}, {USA}: {US} Department of Defense},
year = {1998}
}
@article{sysml_practical_guide,
author = {Friedenthal, S., A. Moore, R. Steiner, and M. Kaufman.},
title = {A Practical Guide to SysML: The Systems Modeling Language, 3rd Edition. },
journal = {MK/OMG Press.,},
year = {2014}
}
@article{modsim,
author = {Bellinger, G},
title = {Modeling \& Simulation: An Introduction.},
year = {2004}
}
@article{object-process-methodology,
author = {Dori, D.},
title = {Object-Process Methodology: A Holistic System Paradigm.},
journal = {New York, NY, USA: Springer.},
year = {2002}
}
@article{ORMSC/2010-09-06,
author = {Object Management Group},
title = {{MDA} Foundation Model. {OMG} document number {ORMSC/2010-09-06.}},
year = {2010}
}

@article{incose-systems-engineering-2020,
title = {Technical Operations International Council on Systems Engineering {INCOSE}. {INCOSE} Systems Engineering Vision 2020. Technical report.}
}
@article{mbse,
title = {Model-Based Systems Engineering ({MBSE}) (glossary)}
}
@article{omgwiki,
title = {{MBSE} Wiki}
}

@article{fuml,
author = {Object Management Group},
title = {Semantics of a Foundational Subset for Executable {UML} Models},
year = {2018}
}

@article{state-vs-activity,
author = {Samek, Miro},
year = {2015},
month = {08},
pages = {},
title = {Application Note A Crash Course in UML State Machines Document Revision C}
}

@article(omg_sysml,
author = {Object Management Group},
title = {{OMG} System Modeling Language}
)

@article(omg_sysml_v2,
author = {Object Management Group},
title = {Systems Modeling Language Version 2 ({SysMLv2})}
year = {2020},
)

@article(uppaal,
author = {Behrmann, G., David, A., Larsen, K. G., Håkansson, J., Pettersson, P., Yi, W., Hendriks, M.},
title = {Uppaal 4.0},
year = {2006}
)
@article(theta,
author = {Tóth, T., Hajdu, A., Vörös, A., Micskei, Z., Majzik, I.},
title = { Theta: a framework for abstraction refinement-based model checking.},
journal = {Stewart, D., Weissenbacher, G. (eds.), Proceedings of the 17th Conference on Formal Methods in Computer-Aided Design}
)

@article(xsts,
author = {Milán Mondok},
title = {Extended symbolic transition systems: an intermediate language for the formal verification of engineering models},
year = {2020},
journal = {Scientific Students’ Association Report}
)

@article(euml,
author = {Mellor SJ, Balcer MJ.},
title = {Executable {UML}: A Foundation for Model- {DrivenArchitecture}.},
year = {2002},
journal = {The Addison-Wesley Object TechnologySeries: Addison-Wesley Professional}
)

@article(pssm-testing,
author = {Márton Elekes, Zoltán Micskei},
title = {Towards Testing the UML PSSM Test Suite.},
year = {2021}
)

@article(pssm,
author = {{OMG}},
title = {Precise Semantics of {UML} State Machines ({PSSM})},
year = {2019},
journal = {formal/19-05-01.}
)

﻿@Article{mixed_statecharts_2020,
author={Graics, Bence
and Moln{\'a}r, Vince
and V{\"o}r{\"o}s, Andr{\'a}s
and Majzik, Istv{\'a}n
and Varr{\'o}, D{\'a}niel},
title={Mixed-semantics composition of statecharts for the component-based design of reactive systems},
journal={Software and Systems Modeling},
year={2020},
month={Nov},
day={01},
volume={19},
number={6},
pages={1483-1517},
issn={1619-1374},
doi={10.1007/s10270-020-00806-5}
}

@InProceedings{10.1007/978-3-319-11653-2_10,
author={Reggio, Gianna and Leotta, Maurizio and Ricca, Filippo},
editor={Dingel, Juergen and Schulte, Wolfram and Ramos, Isidro and Abrah{\~a}o, Silvia and Insfran, Emilio},
title={Who Knows/Uses What of the {UML}: A Personal Opinion Survey},
booktitle={Model-Driven Engineering Languages and Systems},
year={2014},
publisher={Springer International Publishing},
address={Cham},
pages={149--165}
}

@inproceedings{10.1145/3417990.3421407,
author = {Horv\'{a}th, Benedek and Graics, Bence and Hajdu, \'{A}kos and Micskei, Zolt\'{a}n and Moln\'{a}r, Vince and R\'{a}th, Istv\'{a}n and Andolfato, Luigi and Gomes, Ivan and Karban, Robert},
title = {Model Checking as a Service: Towards Pragmatic Hidden Formal Methods},
year = {2020},
isbn = {9781450381352},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
doi = {10.1145/3417990.3421407},
booktitle = {Proceedings of the 23rd ACM/IEEE International Conference on Model Driven Engineering Languages and Systems: Companion Proceedings},
articleno = {37},
numpages = {5},
keywords = {MBSE, SysML, verification, model checking},
location = {Virtual Event, Canada},
series = {MODELS '20}
}

@article{REISIG19911,
title = {Petri nets and algebraic specifications},
journal = {Theoretical Computer Science},
volume = {80},
number = {1},
pages = {1-34},
year = {1991},
issn = {0304-3975},
doi = {https://doi.org/10.1016/0304-3975(91)90203-E}
author = {Wolfgang Reisig},
abstract = {Petri nets gain a great deal of modelling power by representing dynamically changing items as structured tokens (instead of “black dots”). Algebraic specifications turned out adequate for dealing with structured items. We will use this formalism to construct Petri nets with structured tokens. Place- and transition-invariants are useful analysis techniques for conventional Petri nets. We derive corresponding formalisms for nets with structured tokens, based on term substitution.}
}

@book{10.5555/332656,
author = {Clarke, Edmund M. and Grumberg, Orna and Peled, Doron A.},
title = {Model Checking},
year = {2000},
isbn = {0262032708},
publisher = {MIT Press},
address = {Cambridge, MA, USA}
}

@article{10.1145/1125808.1125809,
author = {Eshuis, Rik},
title = {Symbolic Model Checking of UML Activity Diagrams},
year = {2006},
issue_date = {January 2006},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {15},
number = {1},
issn = {1049-331X},
doi = {10.1145/1125808.1125809},
abstract = {Two translations from activity diagrams to the input language of NuSMV, a symbolic
model verifier, are presented. Both translations map an activity diagram into a finite
state machine and are inspired by existing statechart semantics. The requirements-level
translation defines state machines that can be efficiently verified, but are a bit
unrealistic since they assume the perfect synchrony hypothesis. The implementation-level
translation defines state machines that cannot be verified so efficiently, but that
are more realistic since they do not use the perfect synchrony hypothesis. To justify
the use of the requirements-level translation, we show that for a large class of activity
diagrams and certain properties, both translations are equivalent: regardless of which
translation is used, the outcome of model checking is the same. Moreover, for linear
stuttering-closed properties, the implementation-level translation is equivalent to
a slightly modified version of the requirements-level translation. We use the two
translations to model check data integrity constraints for an activity diagram and
a set of class diagrams that specify the data manipulated in the activities. Both
translations have been implemented in two tools. We discuss our experiences in applying
both translations to model check some large example activity diagrams.},
journal = {ACM Trans. Softw. Eng. Methodol.},
month = jan,
pages = {1–38},
numpages = {38},
keywords = {Unified Modeling Language, activity diagrams, Model checking}
}

@article{OUCHANI20142713,
title = {A formal verification framework for SysML activity diagrams},
journal = {Expert Systems with Applications},
volume = {41},
number = {6},
pages = {2713-2728},
year = {2014},
issn = {0957-4174},
doi = {https://doi.org/10.1016/j.eswa.2013.10.064},
author = {Samir Ouchani and Otmane Aït Mohamed and Mourad Debbabi},
keywords = {SysML activity diagram, Probabilistic automata, Probabilistic relation, PCTL}
}

@InProceedings{10.1007/978-3-642-33826-7_18,
author="Ouchani, Samir
and Ait Mohamed, Otmane
and Debbabi, Mourad",
editor="Eleftherakis, George
and Hinchey, Mike
and Holcombe, Mike",
title="Efficient Probabilistic Abstraction for SysML Activity Diagrams",
booktitle="Software Engineering and Formal Methods",
year="2012",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="263--277"
}

@InProceedings{10.1007/978-3-319-08156-4_36,
author="Czopik, Jan
and Ko{\v{s}}in{\'a}r, Michael Alexander
and {\v{S}}tolfa, Jakub
and {\v{S}}tolfa, Svatopluk",
editor="K{\"o}mer, Pavel
and Abraham, Ajith
and Sn{\'a}{\v{s}}el, V{\'a}clav",
title="Formalization of Software Process Using Intuitive Mapping of {UML} Activity Diagram to {CPN}",
booktitle="Proceedings of the Fifth International Conference on Innovations in Bio-Inspired Computing and Applications {IBICA} 2014",
year="2014",
publisher="Springer International Publishing",
address="Cham",
pages="365--374",
isbn="978-3-319-08156-4"
}

@inproceedings{rahim:hal-00935748,
  TITLE = {{Modular and Distributed Verification of SysML Activity Diagrams}},
  AUTHOR = {RAHIM, Messaoud and Hammad, Ahmed and Ioualalen, Malika},
  BOOKTITLE = {{MODELSWARD 2013, 1st Int. Conf. on Model-Driven Engineering and Software Development}},
  ADDRESS = {Spain},
  PAGES = {202 - 205},
  YEAR = {2013},
  MONTH = Jan,
  PDF = {https://hal.archives-ouvertes.fr/hal-00935748/file/modelswardDA.pdf},
  HAL_ID = {hal-00935748},
  HAL_VERSION = {v1},
}