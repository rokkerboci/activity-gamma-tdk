@misc{lima2019framework,
	title={A framework for verifying deadlock and nondeterminism in UML activity diagrams based on CSP}, 
	author={Lucas Lima and Amaury Tavares and Sidney C. Nogueira},
	year={2019},
	eprint={1910.13638},
	archivePrefix={arXiv},
	primaryClass={cs.SE}
}

@inproceedings{molnar2018gamma,
	author = {Vince Moln{\'{a}}r and
	Bence Graics and
	Andr{\'{a}}s V{\"{o}}r{\"{o}}s and
	Istv{\'{a}}n Majzik and
	D{\'{a}}niel Varr{\'{o}}},
	title = {The {G}amma statechart composition framework: design, verification and code generation for component-based reactive systems},
	booktitle = {Proceedings of the 40th International Conference on Software Engineering: Companion Proceeedings},
	pages = {113--116},
	year = {2018},
	publisher = {ACM},
	doi = {10.1145/3183440.3183489}
}

@article{HAREL1987231,
title = {Statecharts: a visual formalism for complex systems},
journal = {Science of Computer Programming},
volume = {8},
number = {3},
pages = {231-274},
year = {1987},
issn = {0167-6423},
doi = {https://doi.org/10.1016/0167-6423(87)90035-9},
url = {https://www.sciencedirect.com/science/article/pii/0167642387900359},
author = {David Harel},
abstract = {We present a broad extension of the conventional formalism of state machines and state diagrams, that is relevant to the specification and design of complex discrete-event systems, such as multi-computer real-time systems, communication protocols and digital control units. Our diagrams, which we call statecharts, extend conventional state-transition diagrams with essentially three elements, dealing, respectively, with the notions of hierarchy, concurrency and communication. These transform the language of state diagrams into a highly structured and economical description language. Statecharts are thus compact and expressive—small diagrams can express complex behavior—as well as compositional and modular. When coupled with the capabilities of computerized graphics, statecharts enable viewing the description at different levels of detail, and make even very large specifications manageable and comprehensible. In fact, we intend to demonstrate here that statecharts counter many of the objections raised against conventional state diagrams, and thus appear to render specification by diagrams an attractive and plausible approach. Statecharts can be used either as a stand-alone behavioral description or as part of a more general design methodology that deals also with the system's other aspects, such as functional decomposition and data-flow specification. We also discuss some practical experience that was gained over the last three years in applying the statechart formalism to the specification of a particularly complex system.}
}

@InProceedings{10.1007/978-3-642-82453-1_17,
author="Harel, D.
and Pnueli, A.",
editor="Apt, Krzysztof R.",
title="On the Development of Reactive Systems",
booktitle="Logics and Models of Concurrent Systems",
year="1985",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="477--498",
abstract="Some observations are made concerning the process of developing complex systems. A broad class of systems, termed reactive, is singled out as being particularly problematic when it comes to finding satisfactory methods for behavioral description. In this paper we recommend the recently proposed statechart method for this purpose. Moreover, it is observed that most reactive systems cannot be developed in a linear stepwise fashion, but, rather, give rise to a two-dimensional development process, featuring behavioral aspects in the one dimension and implementational ones in the other. Concurrency may occur in both dimensions, as orthogonality of states in the one and as parallelism of subsystems in the other. A preliminary approach to working one's way through this ``magic square'' of system development is then presented. The ideas described herein seem to be relevant to a wide variety of application areas.",
isbn="978-3-642-82453-1"
}

@ARTICLE{24143,  author={Murata, T.},  journal={Proceedings of the IEEE},   title={Petri nets: Properties, analysis and applications},   year={1989},  volume={77},  number={4},  pages={541-580},  doi={10.1109/5.24143}}

@article{https://doi:10.4018/978-1-4666-5888-2.ch705,
author = {Hasan, Osman and Sofiène Tahar. },
title = {Encyclopedia of Information Science and Technology, Third Edition},
chapter={Formal Verification Methods.},
pages = {7162-7170.},
doi = {https://doi:10.4018/978-1-4666-5888-2.ch705},
year = {2015}
}

@article{https://doi.org/10.1002/sys.21524,
author = {Huang, Edward and McGinnis, Leon F. and Mitchell, Steven W.},
title = {Verifying SysML activity diagrams using formal transformation to Petri nets},
journal = {Systems Engineering},
volume = {23},
number = {1},
pages = {118-135},
keywords = {model-based systems engineering, system behavior modeling, model transformation},
doi = {https://doi.org/10.1002/sys.21524},
url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/sys.21524},
eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/sys.21524},
abstract = {Abstract The development of contemporary systems is an extremely complex process. One approach to modeling system behavior uses activity diagrams from Unified Modeling Language (UML)/System Modeling Language (SysML), providing a standard object-oriented graphical notation and enhancing reusability. However, UML/SysML activity diagrams do not directly support the kind of analysis needed to verify the system behavior, such as might be available with a Petri net (PN) model. We show that a behavior model represented by a set of fUML-compliant modeling elements in UML/SysML activity diagrams can be transformed into an equivalent PN, so that the analysis capability of PN can be applied. We define a formal mathematical notation for a set of modeling elements in activity diagrams, show the mapping rules between PN and activity diagrams, and propose a formal transformation algorithm. Two example system behavior models represented by UML/SysML activity diagrams are used for illustration.},
year = {2020}
}


@article{DoD_modeling_and_simulation,
author = {DoD},
title = {DoD Modeling and Simulation (M\&S) Glossary},
journal = {DoD Manual 5000.59-M. Arlington, VA, USA: US Department of Defense},
url = {https://apps.dtic.mil/sti/pdfs/ADA349800.pdf},
year = {1998}
}
@article{sysml_practical_guide,
author = {Friedenthal, S., A. Moore, R. Steiner, and M. Kaufman.},
title = {A Practical Guide to SysML: The Systems Modeling Language, 3rd Edition. },
journal = {MK/OMG Press.,},
year = {2014}
}
@article{modsim,
author = {Bellinger, G},
title = {Modeling \& Simulation: An Introduction.},
url = {http://www.systems-thinking.org/modsim/modsim.htm},
year = {2004}
}
@article{object-process-methodology,
author = {Dori, D.},
title = {Object-Process Methodology: A Holistic System Paradigm.},
journal = {New York, NY, USA: Springer.},
year = {2002}
}
@article{ORMSC/2010-09-06,
author = {Object Management Group},
title = {MDA Foundation Model. OMG document number ORMSC/2010-09-06.},
year = {2010}
}

@article{incose-systems-engineering-2020,
title = {Technical Operations International Council on Systems Engineering INCOSE. INCOSE Systems Engineering Vision 2020. Technical report.},
url = {https://sebokwiki.org/wiki/INCOSE_Systems_Engineering_Vision_2020}
}
@article{mbse,
title = {Model-Based Systems Engineering (MBSE) (glossary)},
url = {https://sebokwiki.org/wiki/Model-Based_Systems_Engineering_(MBSE)_(glossary)}
}
@article{omgwiki,
title = {MBSE Wiki},
url = {https://www.omgwiki.org/MBSE/doku.php?id=start}
}

@article{fuml,
author = {Object Management Group},
title = {Semantics of a Foundational Subset for Executable UML Models},
url = {https://www.omg.org/spec/FUML/1.4/},
year = {2018}
}

@article{state-vs-activity,
author = {Samek, Miro},
year = {2015},
month = {08},
pages = {},
title = {Application Note A Crash Course in UML State Machines Document Revision C}
}

@article(omg_sysml,
author = {Object Management Group},
title = {OMG System Modeling Language},
url = {https://www.omg.org/spec/SysML/}
)

@article(omg_sysml_v2,
author = {Object Management Group},
title = {Systems Modeling Language Version 2 (SysMLv2)},
url = {https://www.omgsysml.org/SysML-2.htm},
year = {2020},
)

@article(uppaal,
author = {Behrmann, G., David, A., Larsen, K. G., Håkansson, J., Pettersson, P., Yi, W., Hendriks, M.},
title = {Uppaal 4.0},
year = {2006}
)
@article(theta,
author = {Tóth, T., Hajdu, A., Vörös, A., Micskei, Z., Majzik, I.},
title = { Theta: a framework for abstraction refinement-based model checking.},
journal = {Stewart, D., Weissenbacher, G. (eds.), Proceedings of the 17th Conference on Formal Methods in Computer-Aided Design}
)

@article(xsts,
author = {Milán Mondok},
title = {Extended symbolic transition systems: an intermediate language for the formal verification of engineering models},
year = {2020},
journal = {Scientific Students’ Association Report}
)

@article(euml,
author = {Mellor SJ, Balcer MJ.},
title = {Executable UML: A Foundation for Model- DrivenArchitecture.},
year = {2002},
journal = {The Addison-Wesley Object TechnologySeries: Addison-Wesley Professional}
)

@article(pssm-testing,
author = {Márton Elekes, Zoltán Micskei},
title = {Towards Testing the UML PSSM Test Suite.},
year = {2021}
)

@article(pssm,
author = {OMG},
title = {Precise Semantics of UML State Machines (PSSM)},
year = {2019},
journal = {formal/19-05-01.}
)

﻿@Article{mixed_statecharts_2020,
author={Graics, Bence
and Moln{\'a}r, Vince
and V{\"o}r{\"o}s, Andr{\'a}s
and Majzik, Istv{\'a}n
and Varr{\'o}, D{\'a}niel},
title={Mixed-semantics composition of statecharts for the component-based design of reactive systems},
journal={Software and Systems Modeling},
year={2020},
month={Nov},
day={01},
volume={19},
number={6},
pages={1483-1517},
abstract={The increasing complexity of reactive systems can be mitigated with the use of components and composition languages in model-driven engineering. Designing composition languages is a challenge itself as both practical applicability (support for different composition approaches in various application domains), and precise formal semantics (support for verification and code generation) have to be taken into account. In our Gamma Statechart Composition Framework, we designed and implemented a composition language for the synchronous, cascade synchronous and asynchronous composition of statechart-based reactive components. We formalized the semantics of this composition language that provides the basis for generating composition-related Java source code as well as mapping the composite system to a back-end model checker for formal verification and model-based test case generation. In this paper, we present the composition language with its formal semantics, putting special emphasis on design decisions related to the language and their effects on verifiability and applicability. Furthermore, we demonstrate the design and verification functionality of the composition framework by presenting case studies from the cyber-physical system domain.},
issn={1619-1374},
doi={10.1007/s10270-020-00806-5},
url={https://doi.org/10.1007/s10270-020-00806-5}
}

@InProceedings{10.1007/978-3-319-11653-2_10,
author="Reggio, Gianna and Leotta, Maurizio and Ricca, Filippo",
editor="Dingel, Juergen and Schulte, Wolfram and Ramos, Isidro and Abrah{\~a}o, Silvia and Insfran, Emilio",
title="Who Knows/Uses What of the UML: A Personal Opinion Survey",
booktitle="Model-Driven Engineering Languages and Systems",
year="2014",
publisher="Springer International Publishing",
address="Cham",
pages="149--165",
abstract="UML is a comprehensive notation, offering a very large set of diagrams and constructs covering any possible modelling need. As consequence, on one hand, it is difficult and time consuming to master it, and on the other hand, people tend, naturally, to consider only a part of it. In practice, many UML diagrams/constructs seem scarcely used or even their existence is not known. By means of a study covering any possible source of information (e.g. UML books and tools), we started to assess which part of the UML is considered and used in practice. Here, we present some results about knowledge and usage of the UML diagrams by means of a personal opinion survey with 275 participants from both industry and academy, analysing also the influence of different factors: working environment (academia vs. industry), working role, seniority, education, and gender.",
isbn="978-3-319-11653-2"
}

@inproceedings{10.1145/3417990.3421407,
author = {Horv\'{a}th, Benedek and Graics, Bence and Hajdu, \'{A}kos and Micskei, Zolt\'{a}n and Moln\'{a}r, Vince and R\'{a}th, Istv\'{a}n and Andolfato, Luigi and Gomes, Ivan and Karban, Robert},
title = {Model Checking as a Service: Towards Pragmatic Hidden Formal Methods},
year = {2020},
isbn = {9781450381352},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3417990.3421407},
doi = {10.1145/3417990.3421407},
abstract = {Executable models can be used to support all engineering activities in Model-Based
Systems Engineering. Testing and simulation of such models can provide early feedback
about design choices. However, in today's complex systems, failures could arise due
to subtle errors that are hard to find without checking all possible execution paths.
Formal methods, and especially model checking can uncover such subtle errors, yet
their usage in practice is limited due to the specialized expertise and high computing
power required. Therefore we created an automated, cloud-based environment that can
verify complex reachability properties on SysML State Machines using hidden model
checkers. The approach and the prototype is illustrated using an example from the
aerospace domain.},
booktitle = {Proceedings of the 23rd ACM/IEEE International Conference on Model Driven Engineering Languages and Systems: Companion Proceedings},
articleno = {37},
numpages = {5},
keywords = {MBSE, SysML, verification, model checking},
location = {Virtual Event, Canada},
series = {MODELS '20}
}

@article{REISIG19911,
title = {Petri nets and algebraic specifications},
journal = {Theoretical Computer Science},
volume = {80},
number = {1},
pages = {1-34},
year = {1991},
issn = {0304-3975},
doi = {https://doi.org/10.1016/0304-3975(91)90203-E},
url = {https://www.sciencedirect.com/science/article/pii/030439759190203E},
author = {Wolfgang Reisig},
abstract = {Petri nets gain a great deal of modelling power by representing dynamically changing items as structured tokens (instead of “black dots”). Algebraic specifications turned out adequate for dealing with structured items. We will use this formalism to construct Petri nets with structured tokens. Place- and transition-invariants are useful analysis techniques for conventional Petri nets. We derive corresponding formalisms for nets with structured tokens, based on term substitution.}
}